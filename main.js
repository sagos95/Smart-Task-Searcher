import {
  API_URL,
  ACCESS_TOKEN,
  OPENAI_KEY,
  nash_failik
} from './local-settings.js';

const SPACE_ID = "317748"; // Replace with actual space ID
const OFFSET = 0;                // Adjust as needed
const LIMIT = 50;                // Adjust as needed
const PAGE_SIZE = 100;


// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
const button = document.createElement('button');
button.innerText = '–ù–∞–∂–º–∏ –º–µ–Ω—è!';
button.className = 'v5-emotion-MuiButtonBase-root v5-emotion-MuiTab-root v5-emotion-MuiTab-textColorPrimary Mui-selected css-1mrn996';
button.id = 'custom-button';
button.style.position = 'fixed';
button.style.bottom = '20px';
button.style.right = '20px';
button.style.zIndex = '10000';
button.style.padding = '10px';
button.style.border = '1px solid #ccc';
button.style.borderRadius = '8px';
button.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';
button.style.fontSize = '16px';
button.style.cursor = 'pointer';

// –°–æ–∑–¥–∞–µ–º –∏–Ω–ø—É—Ç
const input = document.createElement('input');
input.type = 'text';
input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...';
input.className = 'v4-MuiInputBase-root v4-MuiOutlinedInput-root v5-v5294 v4-MuiInputBase-fullWidth v4-MuiInputBase-formControl v4-MuiInputBase-adornedStart v4-MuiOutlinedInput-adornedStart v5-v5295 v4-MuiInputBase-marginDense v4-MuiOutlinedInput-marginDense'; // –ö–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
input.style.position = 'fixed';
input.style.bottom = '20px';
input.style.right = 'calc(20px + 120px)'; // –£—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 120px)
input.style.zIndex = '10000';
input.style.padding = '10px';
input.style.border = '1px solid #ccc';
input.style.borderRadius = '8px';
input.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';
input.style.fontSize = '16px';

// const bottomButtonsHolder = document.createElement('div');
// bottomButtonsHolder.style.position = 'fixed';
// bottomButtonsHolder.style.bottom = '20px';
// bottomButtonsHolder.style.right = '20px';
// bottomButtonsHolder.style.zIndex = '10000';

// bottomButtonsHolder.appendChild(input);
// bottomButtonsHolder.appendChild(button);
// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ø—É—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
// document.body.appendChild(bottomButtonsHolder);
document.body.appendChild(input);
document.body.appendChild(button);

window.addEventListener("load", (event) => {
  console.log("page is fully loaded");

  // todo: retry
  setTimeout(() => {
    const newButton = document.createElement('button');
    newButton.className = 'v5-emotion-MuiButtonBase-root v5-emotion-MuiIconButton-root v5-emotion-MuiIconButton-sizeLarge css-1w8s6so';
    newButton.innerText = 'AI search üîé ';
    newButton.id = 'custom-header-button';
    newButton.style.fontSize = '1rem';
    newButton.style.border = '1px solid #848484';
    newButton.style.borderRadius = '0.5rem';

    const headerEl = document.body.getElementsByTagName('header');
    const headerButtonsContainer = headerEl[0].children[0].children[1].children[1];
    // headerButtonsContainer.appendChild(newButton);
    headerButtonsContainer.insertBefore(newButton, headerButtonsContainer.firstChild);
  }, "2000");
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
button.addEventListener('click', async () => {
    alert('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ');
    const kaitenData = await fetchKaitenCards();
    console.log("Kaiten Length:", kaitenData.length);
    console.log("Kaiten Cards:", kaitenData);

    // approach with using files and vector search
    // const fileId = await uploadFile(kaitenData);
    // console.log("fileId: ", fileId);

    // approach with direct asking chat gpt
    const question = input.value.trim(); // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏–Ω–ø—É—Ç–∞  
    const gptResponse = await askChatGpt(kaitenData, question);
    console.log("Gpt response:", gptResponse);
  
    // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    resultList.innerHTML = '';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    try {
      const parsedResponse = JSON.parse(gptResponse);

      if (Array.isArray(parsedResponse) && parsedResponse.length > 0) {
          parsedResponse.forEach(card => {
              const listItem = document.createElement('li');
              listItem.textContent = `ID: ${card.id}, Title: ${card.title}`;
              listItem.style.marginBottom = '5px';
              resultList.appendChild(listItem);
          });
      } else {
          const noResults = document.createElement('li');
          noResults.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
          resultList.appendChild(noResults);
      }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ GPT:', error);
        const errorItem = document.createElement('li');
        errorItem.textContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.';
        resultList.appendChild(errorItem);
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.body.appendChild(button);

// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const resultList = document.createElement('ul');
resultList.style.position = 'fixed';
resultList.style.bottom = '80px'; // –†–∞—Å–ø–æ–ª–æ–∂–∏–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π –∏ –∏–Ω–ø—É—Ç–æ–º
resultList.style.right = '20px';
resultList.style.zIndex = '10000';
resultList.style.padding = '10px 30px;';
resultList.style.border = '1px solid #ccc';
resultList.style.borderRadius = '8px';
resultList.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';
resultList.style.backgroundColor = '#fff';
resultList.style.maxHeight = '200px';
resultList.style.overflowY = 'auto';
resultList.style.fontSize = '14px';

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.body.appendChild(resultList);


async function askChatGpt(context, question) {
  const systemPrompt =
    `
      –¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–µ–∫ –∏–∑ –¥–æ—Å–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏.
      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–±–µ –∏—Å–∫–æ–º—É—é –∑–∞–¥–∞—á—É. –ù–∞–π–¥–∏ –∏ –≤—ã–¥–∞–π —Å–ø–∏—Å–æ–∫ id –∏ title –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç –∏—Å–∫–æ–º–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
      –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–∞ [{"id": "...", "title": "..."}], –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –Ω–∞—à–ª–æ—Å—å.
      –ù–µ –æ–±—ä—è—Å–Ω—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–∞–π —Å—Ä–∞–∑—É JSON –¥–∞–Ω–Ω—ã–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–ª–æ–≤–æ json –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞
    `;

  const payload = {
    model: "gpt-4o",
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: "–í–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏: \n```" + JSON.stringify(context) + "```\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + question }
    ]
    // ,
    // response_format: {
    //   type: "json_schema",
    //   json_schema: {
    //     name: "task_response",
    //     strict: true,
    //     schema: {
    //       type: "array",
    //       items: {
    //         type: "object",
    //         properties: {
    //           id: { type: "string", description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏" },
    //           title: { type: "string", description: "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" }
    //         },
    //         required: ["id", "title"],
    //         additionalProperties: false
    //       }
    //     }
    //   }
    // }
  };

  console.log("payload:", payload);

  try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${OPENAI_KEY}`
          },
          body: JSON.stringify(payload)
      });

      if (!response.ok) {
          console("openai response:", response.body)
          throw new Error(`–û—à–∏–±–∫–∞ API OpenAI: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      const gptAnswer = data.choices[0].message.content;
      return gptAnswer;

  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: ", error);
      throw error;
  }
}

async function fetchKaitenCards() {
    try {
        const response = await fetch(API_URL, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${ACCESS_TOKEN}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const rawJson = await response.json();

        const extractedFieldsJson = rawJson.map(obj => ({
          id: obj.id,
          title: obj.title
        }));

        return extractedFieldsJson;
    } catch (error) {
        console.error("Error fetching Kaiten cards:", error);
        throw error
    }
}

async function uploadFile(fileData) {

    // Convert data to JSONL format
    const jsonlContent = fileData.map(entry => JSON.stringify(entry)).join('\n');
        
    // Create a Blob from the JSONL content
    const file = new Blob([jsonlContent], { type: "application/jsonl" });

    const formData = new FormData();
    formData.append("purpose", "assistants");
    formData.append("file", file);
  
    try {
      const response = await fetch('https://api.openai.com/v1/files', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_KEY}`
        },
        body: formData
      });
  
      if (response.ok) {
        const data = await response.json();
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', data);
        return data.id;
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

// for auto-pagination:
// const fetchAllData = async () => {
//     let allData = [];  // Array to store all results
//     let offset = 0;    // Start offset
//     let hasMoreData = true;

//     while (hasMoreData) {
//         try {
//             // Construct URL with the current offset
//             const url = `${API_URL}?space_id=${SPACE_ID}&offset=${offset}&limit=${PAGE_SIZE}&archived=false`;

//             // Make the API call
//             const response = await fetch(url, {
//                 method: "GET",
//                 headers: {
//                     "Content-Type": "application/json",
//                     "Authorization": `Bearer ${ACCESS_TOKEN}`
//                 }
//             });

//             if (!response.ok) {
//                 throw new Error(`HTTP error! status: ${response.status}`);
//             }

//             const data = await response.json();

//             // Add the current batch to the overall data
//             allData = allData.concat(data);

//             // Check if we should fetch more
//             ???
//             if (data.length < PAGE_SIZE) {
//                 hasMoreData = false;  // No more data to fetch
//             } else {
//                 offset += PAGE_SIZE; // Increment the offset
//             }
//         } catch (error) {
//             console.error("Error fetching data:", error);
//             break;
//         }
//     }

//     return allData;  // Return the aggregated data
// };



// chrome.storage.local.set({ fetchedData: data }, () => {
//     console.log("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
// });

// // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
// chrome.storage.local.get("fetchedData", result => {
//   console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", result.fetchedData);
// });